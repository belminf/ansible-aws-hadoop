---
- name: Create and configure AWS
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    ubuntu_ami: ami-13be557e
    cidr_block: 172.16.0.0/16
    region: "{{ lookup('env','AWS_DEFAULT_REGION') }}"
    az: "{{ lookup('env','AWS_DEFAULT_AZ') }}"
    keypair: "{{ lookup('env','AWS_DEFAULT_KEYPAIR') }}"
    master_nodes_count: 1
    data_nodes_count: 2
  tasks:

    - name: VPC networking
      ec2_vpc:
        state: present
        cidr_block: "{{ cidr_block }}"
        region: "{{ region }}"
        resource_tags:
          Name: vpc_hadoop
        internet_gateway: yes
        wait: yes
      register: vpc
    
    - name: Subnet routable to internet
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc_id }}"
        cidr: 172.16.1.0/24
        region: "{{ region }}"
        az: "{{ az }}"
        resource_tags:
          Name: sn_hadoop
      register: sn_hadoop

    - name: Routing table with internet
      ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc_id }}"
        region: "{{ region }}"
        subnets:
          - "{{ sn_hadoop.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: igw
        resource_tags:
          Name: rt_internet

    - name: External IP for SG rule
      uri: url=http://checkip.amazonaws.com/ return_content=yes
      register: checkip

    - name: Hadoop master nodes security group
      ec2_group:
        name: sg_hadoop_master_nodes
        description: Hadoop master nodes
        region: "{{ region }}"
        vpc_id: "{{ vpc.vpc_id }}"
        rules:
          - proto: tcp
            to_port: 22
            from_port: 22
            cidr_ip: "{{ checkip.content | replace('\n', '') }}/32"
          - proto: all
            group_name: sg_hadoop_master_nodes

    - name: Hadoop data nodes security group
      ec2_group:
        name: sg_hadoop_data_nodes
        description: Hadoop data nodes
        region: "{{ region }}"
        vpc_id: "{{ vpc.vpc_id }}"
        rules:
          - proto: tcp
            to_port: 22
            from_port: 22
            cidr_ip: "{{ checkip.content | replace('\n', '') }}/32"
          - proto: all
            group_name: sg_hadoop_master_nodes

    - name: Master EC2 instances
      ec2:
        key_name: "{{ keypair }}"
        group: sg_hadoop_master_nodes
        instance_type: t2.micro
        image: "{{ ubuntu_ami }}"
        region: "{{ region }}"
        vpc_subnet_id: "{{ sn_hadoop.subnet.id }}"
        assign_public_ip: yes
        wait: true
        instance_tags:
          Group: hadoop_master
        exact_count: "{{ master_nodes_count }}"
        count_tag:
          Group: hadoop_master
      register: ec2_master
    
    - name: Data node EC2 instances
      ec2:
        key_name: "{{ keypair }}"
        group: sg_hadoop_data_nodes
        instance_type: t2.micro
        image: "{{ ubuntu_ami }}"
        region: "{{ region }}"
        vpc_subnet_id: "{{ sn_hadoop.subnet.id }}"
        assign_public_ip: yes
        wait: true
        instance_tags:
          Group: hadoop_datanodes
        exact_count: "{{ data_nodes_count }}"
        count_tag:
          Group: hadoop_datanodes
      register: ec2_datanode

    - name: Gather master instances
      add_host: hostname={{ item.public_ip }} groups={{ item.tags.Group }},hadoop
      with_items: "{{ ec2_master.tagged_instances }}"
      changed_when: no

    - name: Gather datanode instances
      add_host: hostname={{ item.public_ip }} groups={{ item.tags.Group }},hadoop
      with_items: "{{ ec2_datanode.tagged_instances }}"
      changed_when: no

    - name: Wait for SSH to come up
      wait_for: host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
      with_items: 
        - "{{ ec2_master.instances }}"
        - "{{ ec2_datanode.instances }}"

- hosts: hadoop
  remote_user: ubuntu
  gather_facts: no
  become: yes

  pre_tasks:

    - name: Verify python installed
      raw: dpkg -s python-simplejson > /dev/null 2>&1
      register: python_installed
      ignore_errors: True

    - name: Install python
      raw: apt-get -y install python python-simplejson
      when: python_installed|failed

- hosts: hadoop_master
  remote_user: ubuntu
  become: yes
  roles:
    - openjdk8
    - passwordless_ssh

- hosts: hadoop_datanodes
  remote_user: ubuntu
  become: yes
  roles:
    - openjdk8
    - passwordless_ssh master={{ groups[['hadoop_master'][0]] }}
